<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel de Análise de Qualidade</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Incluindo o plugin Chart.js Datalabels para exibir valores nos gráficos -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Slate & Blue Harmony -->
    <!-- Application Structure Plan: A estrutura foi redesenhada para uma abordagem de painel de controle (dashboard) focada puramente em análise de dados e histórico de testes. A seção de "Registro e Análise" foi renomeada para "Análise de Qualidade" e seu formulário de registro de testes foi removido. A aplicação agora foca em oferecer insights visuais imediatos sobre a qualidade e as tendências dos testes (via gráficos dinâmicos) e uma seção de "Histórico de Testes" para consulta e gerenciamento dos dados. O acesso é agora direto, sem a necessidade de identificação de utilizador. Foi adicionada uma uma funcionalidade de drill-down: ao clicar em um cliente no gráfico "Testes por Cliente", uma nova seção é exibida com gráficos detalhados de falhas por componente e testes por modelo específicos para aquele cliente. Uma nova aba "Análise Temporal de Testes" foi incluída para visualizar tendências diárias, semanais e mensais de testes. Os gráficos "Taxa de Sucesso/Falha por Modelo" e "Top Clientes com Mais Falhas" foram removidos conforme solicitado. As melhorias estéticas foram aplicadas em todos os gráficos. O gráfico "Top Falhas por Componente" agora é mais colorido, e o gráfico "Testes por Cliente" também ficou mais colorido. Os filtros de período, status e componente foram removidos, mantendo apenas os filtros de modelo e cliente. A informação dos gráficos agora é exibida diretamente neles, utilizando o plugin chartjs-plugin-datalabels, com aprimoramentos para exibir o número dentro das barras do gráfico "Top Falhas por Componente" e "Testes por Cliente". O gráfico "Testes por Modelo de Dispositivo" foi melhorado para um gráfico de barras verticais com uma nova paleta de cores vibrante e pastel, e a exibição de dados nas fatias foi ajustada. A aba "Análise de IA" foi removida conforme solicitado. A funcionalidade de atualização automática em intervalos regulares foi removida; agora, os dados são atualizados apenas quando os botões "Atualizar Dados" ou "Atualizar Tendências" são clicados, ou no carregamento inicial da página. Um indicador de carregamento foi incluído durante a busca de dados. -->
    <!-- Visualization & Content Choices:
        1. Resumo Geral (Donut Chart): Report Info -> Contagem total de status (OK, Falha). Goal -> Informar a proporção geral de resultados, excluindo 'N/A' por não representar um status de teste funcional. Viz/Presentation -> Gráfico de Donut (Chart.js). Interaction -> Tooltips com contagens exatas ao passar o mouse. Justification -> Oferece uma visão rápida e de alto nível da saúde geral dos testes, focando apenas nos componentes testados. Estilo aprimorado.
        2. Falhas por Componente (Bar Chart): Report Info -> Contagem de falhas para cada componente. Goal -> Comparar e identificar os componentes mais problemáticos. Viz/Presentation -> Gráfico de Barras Horizontais (Chart.js). Interaction -> Tooltips com número de falhas. Justification -> Essencial para análise de causa raiz e priorização de melhorias. O gráfico exibe apenas componentes com falhas e agora utiliza uma paleta de cores variada em tons de azul e mostra os números dentro das barras.
        3. Testes por Modelo (Bar Chart): Report Info -> Distribuição de testes entre os modelos de dispositivos. Goal -> Organizar e entender o volume de testes por modelo. Viz/Presentation -> Gráfico de Barras Verticais (Chart.js). Interaction -> Tooltips com contagem de testes. Justification -> Mostra o foco dos esforços de teste e pode revelar se algum modelo está sendo sub-testado, ideal para visualizar proporções entre categorias. Estilo aprimorado com uma nova paleta de cores vibrante e números nas fatias.
        4. Testes por Cliente (Horizontal Bar Chart): Report Info -> Contagem de testes por cliente. Goal -> Identificar os clientes com maior volume de testes. Viz/Presentation -> Gráfico de Barras Horizontais (Chart.js). Interaction -> Clique em uma barra para ver a análise detalhada por cliente. Justification -> Permite uma visualização clara dos clientes mais ativos e agora serve como um ponto de entrada para uma análise mais profunda. Estilo aprimorado com cores variadas e números dentro das barras.
        5. Falhas por Componente (Cliente) (Bar Chart): Report Info -> Contagem de falhas por componente para um cliente específico. Goal -> Detalhar os problemas de qualidade por componente para um cliente. Viz/Presentation -> Gráfico de Barras Horizontais (Chart.js). Interaction -> Nenhum (resultado do drill-down). Justification -> Aprofunda a análise de falhas, filtrada pelo cliente selecionado. Estilo aprimorado.
        6. Testes por Modelo (Cliente) (Bar Chart): Report Info -> Contagem de testes por modelo para um cliente específico. Goal -> Detalhar os modelos testados para um cliente. Viz/Presentation -> Gráfico de Barras (Chart.js). Interaction -> Nenhum (resultado do drill-down). Justification -> Fornece contexto sobre os tipos de dispositivos que um cliente específico possui ou está testando. Estilo aprimorado.
        7. Testes por Dia (Bar Chart): Report Info -> Contagem de testes por dia. Goal -> Visualizar a atividade diária de testes e tendências. Viz/Presentation -> Gráfico de Barras (Chart.js). Interaction -> Nenhum. Justification -> Retorna ao formato de barras para uma contagem clara por dia. Estilo aprimorado.
        8. Testes por Semana (Bar Chart): Report Info -> Contagem de testes por semana. Goal -> Identificar tendências semanais de testes. Viz/Presentation -> Gráfico de Barras (Chart.js). Interaction -> Nenhum. Justification -> Retorna ao formato de barras para uma contagem clara por semana. Estilo aprimorado.
        9. Testes por Mês (Bar Chart): Report Info -> Contagem de testes por mês. Goal -> Analisar a atividade mensal de testes. Viz/Presentation -> Gráfico de Barras (Chart.js). Interaction -> Nenhum. Justification -> Retorna ao formato de barras para uma contagem clara por mês. Estilo aprimorado.
        Library/Method -> Chart.js para todos os gráficos, renderizados em elementos <canvas> para performance e interatividade.
     -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f1f5f9; }
        .chart-container { position: relative; width: 100%; max-width: 500px; margin: auto; height: 320px; }
        @media (min-width: 768px) { .chart-container { height: 350px; } }
        .tab-active { border-color: #3b82f6; color: #3b82f6; background-color: #eff6ff; }
        .modal-enter { animation: modal-enter 0.3s cubic-bezier(0.25, 0.1, 0.25, 1) forwards; }
        .modal-leave { animation: modal-leave 0.3s cubic-bezier(0.25, 0.1, 0.25, 1) forwards; }
        @keyframes modal-enter { from { opacity: 0; transform: translateY(20px) scale(0.95); } to { opacity: 1; transform: translateY(0) scale(1); } }
        @keyframes modal-leave { from { opacity: 1; transform: translateY(0) scale(1); } to { opacity: 0; transform: translateY(20px) scale(0.95); } }
        .component-falha { border-color: #ef4444; background-color: #fee2e2; }
        .component-ok { border-color: #22c55e; background-color: #dcfce7; }
        .component-na { border-color: #64748b; background-color: #f1f5f9; }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="text-slate-800">

    <div id="app" class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <header class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-slate-900">Painel de Qualidade</h1>
                <p class="text-slate-500 mt-1">Analise os resultados dos testes em tempo real.</p>
            </div>
            <!-- userDisplay removido pois a identificação de utilizador não é mais necessária -->
        </header>

        <nav class="flex border-b border-slate-200 mb-8">
            <button data-tab="dashboard" class="py-3 px-5 font-semibold text-slate-500 border-b-2 border-transparent hover:border-slate-300 hover:text-slate-700 transition-all duration-200 tab-active">
                <i class="fas fa-chart-pie mr-2"></i>Análise de Qualidade
            </button>
            <button data-tab="history" class="py-3 px-5 font-semibold text-slate-500 border-b-2 border-transparent hover:border-slate-300 hover:text-slate-700 transition-all duration-200">
                <i class="fas fa-history mr-2"></i>Histórico de Testes
            </button>
            <button data-tab="time-analysis" class="py-3 px-5 font-semibold text-slate-500 border-b-2 border-transparent hover:border-slate-300 hover:text-slate-700 transition-all duration-200">
                <i class="fas fa-chart-line mr-2"></i>Análise Temporal de Testes
            </button>
            <!-- Removed AI Analysis button as requested by the user -->
            <!-- <button data-tab="ai-analysis" class="py-3 px-5 font-semibold text-slate-500 border-b-2 border-transparent hover:border-slate-300 hover:text-slate-700 transition-all duration-200">
                <i class="fas fa-robot mr-2"></i>Análise de IA
            </button> -->
        </nav>

        <main>
            <div id="dashboard-content">
                <!-- Seção de Análise de Dados - Visão Geral -->
                <section id="analytics-overview-section">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                        <div>
                           <h2 class="text-xl font-bold text-slate-800">Visão Geral da Qualidade</h2>
                           <p class="text-slate-500">Resultados e tendências de todos os testes registrados.</p>
                        </div>
                        <button id="refresh-analytics" class="mt-3 sm:mt-0 text-sm bg-white border border-slate-300 text-slate-700 font-semibold px-4 py-2 rounded-lg hover:bg-slate-50 transition-all duration-200"><i class="fas fa-sync-alt mr-2"></i>Atualizar Dados</button>
                    </div>

                    <!-- Filter Section -->
                    <div class="bg-white p-6 rounded-2xl shadow-sm mb-6">
                        <h3 class="font-semibold text-slate-800 mb-4">Filtros de Análise</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                            <div>
                                <label for="modelFilter" class="block text-sm font-medium text-slate-700">Modelo:</label>
                                <select id="modelFilter" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                    <option value="">Todos</option>
                                </select>
                            </div>
                            <div>
                                <label for="clientFilter" class="block text-sm font-medium text-slate-700">Cliente:</label>
                                <select id="clientFilter" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                    <option value="">Todos</option>
                                </select>
                            </div>
                        </div>
                        <div class="mt-6 flex justify-end">
                            <button id="applyFiltersBtn" class="bg-blue-600 text-white font-semibold px-6 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200">
                                <i class="fas fa-filter mr-2"></i>Aplicar Filtros
                            </button>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <div class="lg:col-span-1 bg-white p-6 rounded-2xl shadow-sm">
                            <h3 class="font-semibold text-slate-800 mb-4">Resumo Geral de Status</h3>
                            <div class="chart-container"><canvas id="overallStatusChart"></canvas></div>
                        </div>
                         <div class="lg:col-span-2 bg-white p-6 rounded-2xl shadow-sm">
                            <h3 class="font-semibold text-slate-800 mb-4">Top Falhas por Componente</h3>
                            <div class="chart-container" style="max-width: none;"><canvas id="failuresByComponentChart"></canvas></div>
                        </div>
                        <div class="lg:col-span-3 bg-white p-6 rounded-2xl shadow-sm">
                            <h3 class="font-semibold text-slate-800 mb-4">Testes por Modelo de Dispositivo</h3>
                            <div class="chart-container" style="max-width: 600px; height: 350px;"><canvas id="testsByModelChart"></canvas></div>
                        </div>
                        <div class="lg:col-span-3 bg-white p-6 rounded-2xl shadow-sm">
                            <h3 class="font-semibold text-slate-800 mb-4">Testes por Cliente</h3>
                            <p class="text-slate-500 text-sm mb-4">Clique em uma barra para ver a análise detalhada por cliente.</p>
                            <div class="chart-container" style="max-width: none; height: 400px;"><canvas id="testsByClientChart"></canvas></div>
                        </div>
                    </div>
                </section>

                <!-- Nova Seção de Análise Detalhada por Cliente (inicialmente oculta) -->
                <section id="client-detail-analytics-section" class="hidden bg-white p-6 sm:p-8 rounded-2xl shadow-sm">
                    <h2 id="client-detail-title" class="text-xl font-bold text-slate-800 mb-2"></h2>
                    <p class="text-slate-500 mb-6">Análise detalhada para o cliente selecionado, incluindo falhas e modelos testados.</p>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                        <div class="bg-slate-50 p-6 rounded-xl shadow-inner">
                            <h3 class="font-semibold text-slate-800 mb-4">Falhas por Componente (deste Cliente)</h3>
                            <div class="chart-container"><canvas id="clientFailuresByComponentChart"></canvas></div>
                        </div>
                        <div class="bg-slate-50 p-6 rounded-xl shadow-inner">
                            <h3 class="font-semibold text-slate-800 mb-4">Modelos Testados (deste Cliente)</h3>
                            <div class="chart-container"><canvas id="clientTestsByModelChart"></canvas></div>
                        </div>
                    </div>
                    <button id="backToOverviewBtn" class="bg-slate-200 text-slate-800 font-semibold px-6 py-3 rounded-lg hover:bg-slate-300 transition-all">
                        <i class="fas fa-arrow-left mr-2"></i>Voltar à Visão Geral
                    </button>
                </section>

            </div>
            <div id="history-content" class="hidden">
                <div class="bg-white p-6 sm:p-8 rounded-2xl shadow-sm">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                         <div>
                            <h2 class="text-xl font-bold text-slate-800">Histórico de Testes</h2>
                            <p class="text-slate-500">Consulte, pesquise e gerencie todos os registros de testes.</p>
                         </div>
                         <div class="relative mt-4 sm:mt-0">
                             <input type="text" id="searchInput" placeholder="Buscar por cliente ou modelo..." class="w-full sm:w-64 pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                             <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-slate-400"></i>
                         </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-slate-200">
                            <thead class="bg-slate-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Data</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Modelo</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Cliente</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status Geral</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Ações</th>
                                </tr>
                            </thead>
                            <tbody id="historyTableBody" class="bg-white divide-y divide-slate-200">
                            </tbody>
                        </table>
                        <p id="no-results" class="text-center py-8 text-slate-500 hidden">Nenhum registro encontrado.</p>
                    </div>
                </div>
            </div>
            <div id="time-analysis-content" class="hidden">
                <section id="temporal-analytics-section" class="bg-white p-6 sm:p-8 rounded-2xl shadow-sm">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                        <div>
                            <h2 class="text-xl font-bold text-slate-800">Análise Temporal de Testes</h2>
                            <p class="text-slate-500">Explore as tendências de testes ao longo do tempo (diário, semanal, mensal).</p>
                        </div>
                        <button id="refresh-temporal-analytics" class="mt-3 sm:mt-0 text-sm bg-white border border-slate-300 text-slate-700 font-semibold px-4 py-2 rounded-lg hover:bg-slate-50 transition-all duration-200"><i class="fas fa-sync-alt mr-2"></i>Atualizar Tendências</button>
                    </div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div class="bg-slate-50 p-6 rounded-xl shadow-inner">
                            <h3 class="font-semibold text-slate-800 mb-4">Testes por Dia (Últimos 7 dias)</h3>
                            <div class="chart-container" style="max-width: none; height: 350px;"><canvas id="testsByDayChart"></canvas></div>
                        </div>
                        <div class="bg-slate-50 p-6 rounded-xl shadow-inner">
                            <h3 class="font-semibold text-slate-800 mb-4">Testes por Semana (Últimas 8 semanas)</h3>
                            <div class="chart-container" style="max-width: none; height: 350px;"><canvas id="testsByWeekChart"></canvas></div>
                        </div>
                        <div class="lg:col-span-2 bg-slate-50 p-6 rounded-xl shadow-inner">
                            <h3 class="font-semibold text-slate-800 mb-4">Testes por Mês (Últimos 12 meses)</h3>
                            <div class="chart-container" style="max-width: none; height: 350px;"><canvas id="testsByMonthChart"></canvas></div>
                        </div>
                    </div>
                </section>
            </div>
            <!-- Removed AI Analysis content as requested by the user -->
            <!-- <div id="ai-analysis-content" class="hidden">
                <section id="ai-analysis-section" class="bg-white p-6 sm:p-8 rounded-2xl shadow-sm">
                    <h2 class="text-xl font-bold text-slate-800 mb-2">Análise de IA</h2>
                    <p class="text-slate-500 mb-6">Gere uma análise detalhada dos dados de testes utilizando Inteligência Artificial.</p>
                    
                    <div class="bg-white p-6 rounded-2xl shadow-sm mb-6">
                        <h3 class="font-semibold text-slate-800 mb-4">Filtros para Relatório de IA</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="modelFilterAI" class="block text-sm font-medium text-slate-700">Modelo:</label>
                                <select id="modelFilterAI" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                    <option value="">Todos</option>
                                </select>
                            </div>
                            <div>
                                <label for="periodFilterAI" class="block text-sm font-medium text-slate-700">Período:</label>
                                <select id="periodFilterAI" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                    <option value="all">Total (todos os dados)</option>
                                    <option value="last7days">Últimos 7 dias</option>
                                    <option value="last4weeks">Últimas 4 semanas</option>
                                    <option value="last3months">Últimos 3 meses</option>
                                    <option value="last6months">Últimos 6 meses</option>
                                    <option value="last12months">Último ano</option>
                                    <option value="custom">Personalizado</option>
                                </select>
                            </div>
                            <div id="customPeriodFields" class="hidden col-span-full grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                                <div>
                                    <label for="startDateAI" class="block text-sm font-medium text-slate-700">Data de Início:</label>
                                    <input type="date" id="startDateAI" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="endDateAI" class="block text-sm font-medium text-slate-700">Data de Fim:</label>
                                    <input type="date" id="endDateAI" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                </div>
                            </div>
                        </div>
                        <div class="mt-6 flex justify-end">
                            <button id="generateAiReportBtn" class="bg-blue-600 text-white font-semibold px-6 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200">
                                <i class="fas fa-file-alt mr-2"></i>Gerar Relatório
                            </button>
                        </div>
                    </div>

                    <div class="bg-slate-50 p-6 rounded-xl shadow-inner">
                        <h3 class="font-semibold text-slate-800 mb-4">Resultado da Análise de IA:</h3>
                        <div id="aiAnalysisOutput" class="text-slate-700 min-h-[100px] flex items-center justify-center">
                            <p class="text-slate-500">Clique em "Gerar Relatório" para iniciar a análise.</p>
                        </div>
                    </div>
                </section>
            </div> -->
        </main>
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay hidden">
        <div class="spinner"></div>
    </div>
    
    <div id="confirm-modal" class="fixed inset-0 bg-slate-900 bg-opacity-60 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white w-full max-w-md p-8 rounded-2xl shadow-xl modal-enter">
             <div class="flex justify-center items-center w-12 h-12 rounded-full mx-auto mb-4" id="confirm-icon-container">
                <i class="fas text-2xl text-white" id="confirm-icon"></i>
            </div>
            <h2 class="text-2xl font-bold text-center text-slate-800" id="confirm-title"></h2>
            <p class="text-center text-slate-500 mt-2 mb-6" id="confirm-message"></p>
            <div class="flex justify-center gap-4">
                <button id="cancel-btn" class="w-full bg-slate-200 text-slate-800 font-semibold py-2.5 rounded-lg hover:bg-slate-300 transition-all">Cancelar</button>
                <button id="confirm-btn" class="w-full text-white font-semibold py-2.5 rounded-lg transition-all">Confirmar</button>
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyE4h4LL3vk8n0m2A0C3p3n6Plz9w9YV0Ip_N8CpBpIk9VRKQmSkIWmzDL05XgdVKmlmw/exec';
    const STATUS_NA = 'N/A';
    const STATUS_OK = 'OK';
    const STATUS_FALHA = 'FALHA';
    // const REFRESH_INTERVAL_MS = 5000; // Refresh every 5 seconds (removed)

    const allComponents = [
        { id: 'aht10', label: 'AHT10' }, { id: 'botao_esquerdo', label: 'Botão Esquerdo' },
        { id: 'botao_central', label: 'Botão Central' }, { id: 'botao_direito', label: 'Botão Direito' },
        { id: 'botao_reset', label: 'Botão Reset' }, { id: 'certificado', label: 'Certificado' },
        { id: 'conector_mola', label: 'Conector Mola' }, { id: 'esp32', label: 'ESP32' },
        { id: 'display', label: 'Display' }, { id: 'led_azul', label: 'LED Azul' },
        { id: 'ledrgb', label: 'LED RGB' }, { id: 'ldr', label: 'LDR' },
        { id: 'ntc', label: 'NTC' }, { id: 'relay', label: 'Relay' },
        { id: 'tm1637', label: 'TM1637' }, { id: 'watchdog', label: 'Watchdog' },
        { id: 'serigrafia', label: 'Serigrafia' }
    ];
    
    const models = [
        { id: "HF801", name: "HF801", hide: ['aht10', 'botao_central'] },
        { id: "HF810", name: "HF810", hide: ['aht10', 'botao_central'] },
        { id: "HF900", name: "HF900", hide: ['aht10', 'botao_central'] },
        { id: "HF405", name: "HF405", hide: ['aht10', 'ntc', 'botao_central'] },
        { id: "HF918", name: "HF918", hide: ['ntc'] }
    ];
    
    let allRecords = []; // This will hold all fetched test records
    let charts = {};
    let currentActiveTab = 'dashboard'; // Keep track of the currently active tab

    const analyticsOverviewSection = document.getElementById('analytics-overview-section');
    const clientDetailAnalyticsSection = document.getElementById('client-detail-analytics-section');
    const clientDetailTitle = document.getElementById('client-detail-title');
    const backToOverviewBtn = document.getElementById('backToOverviewBtn');
    const refreshTemporalAnalyticsBtn = document.getElementById('refresh-temporal-analytics'); 

    // Filter elements
    const modelFilterSelect = document.getElementById('modelFilter');
    const clientFilterSelect = document.getElementById('clientFilter');
    const applyFiltersBtn = document.getElementById('applyFiltersBtn');

    const loadingOverlay = document.getElementById('loading-overlay');

    // Registrar o plugin ChartDataLabels globalmente
    Chart.register(ChartDataLabels);

    const initApp = () => {
        setupTabs();
        fetchAndDisplayHistory(); // Initial fetch (no periodic refresh)
        // setInterval(fetchAndDisplayHistory, REFRESH_INTERVAL_MS); // Removed automatic refresh
    };
    
    const setupTabs = () => {
        const tabs = document.querySelectorAll('[data-tab]');
        const contents = {
            dashboard: document.getElementById('dashboard-content'),
            history: document.getElementById('history-content'),
            'time-analysis': document.getElementById('time-analysis-content'),
        };

        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                tabs.forEach(t => t.classList.remove('tab-active'));
                tab.classList.add('tab-active');

                currentActiveTab = tab.dataset.tab; // Update active tab

                Object.values(contents).forEach(content => {
                    if (content) { // Check if content element exists before manipulating
                        content.classList.add('hidden');
                    }
                });
                if (contents[tab.dataset.tab]) { // Check if target content element exists
                    contents[tab.dataset.tab].classList.remove('hidden');
                }
                
                // Re-render charts for the active tab after switching
                if (tab.dataset.tab === 'dashboard') {
                    analyticsOverviewSection.classList.remove('hidden');
                    clientDetailAnalyticsSection.classList.add('hidden'); // Ensure detail section is hidden
                    applyFilters(); // Re-apply filters to refresh dashboard charts
                } else if (tab.dataset.tab === 'time-analysis') {
                    renderTemporalAnalytics(allRecords); // Re-render temporal charts
                } else if (tab.dataset.tab === 'history') {
                    renderHistoryTable(allRecords); // Re-render history table
                }
            });
        });
    };

    const showLoading = () => {
        loadingOverlay.classList.remove('hidden');
    };

    const hideLoading = () => {
        loadingOverlay.classList.add('hidden');
    };

    const fetchAndDisplayHistory = async () => {
        showLoading();
        try {
            const response = await fetch(`${SCRIPT_URL}?v=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Network response was not ok.');
            allRecords = await response.json();
            allRecords.sort((a, b) => new Date(b.data) - new Date(a.data));
            
            populateFilterOptions(allRecords); 
            // Re-apply filters to ensure charts reflect the latest data based on current filters
            applyFilters(); 
            // If the client detail section is open, refresh its charts as well
            if (!clientDetailAnalyticsSection.classList.contains('hidden')) {
                const clientName = clientDetailTitle.textContent.replace('Análise Detalhada para: ', '');
                if (clientName) {
                    showClientAnalysis(clientName);
                }
            }

        } catch (error) {
            document.getElementById('historyTableBody').innerHTML = `<tr><td colspan="5" class="text-center py-8 text-red-500">Falha ao carregar dados: ${error.message}</td></tr>`;
            console.error('Erro ao buscar dados:', error);
        } finally {
            hideLoading();
        }
    };

    const populateFilterOptions = (records) => {
        const models = new Set();
        const clients = new Set();

        records.forEach(rec => {
            if (rec.modelo) models.add(rec.modelo);
            if (rec.cliente) clients.add(rec.cliente);
        });

        // Populate Model Filter (Dashboard)
        const currentSelectedModel = modelFilterSelect.value;
        modelFilterSelect.innerHTML = '<option value="">Todos</option>';
        Array.from(models).sort().forEach(model => {
            const option = document.createElement('option');
            option.value = model;
            option.textContent = model;
            modelFilterSelect.appendChild(option);
        });
        modelFilterSelect.value = currentSelectedModel; // Persist selection

        // Populate Client Filter (Dashboard)
        const currentSelectedClient = clientFilterSelect.value;
        clientFilterSelect.innerHTML = '<option value="">Todos</option>';
        Array.from(clients).sort().forEach(client => {
            const option = document.createElement('option');
            option.value = client;
            option.textContent = client;
            clientFilterSelect.appendChild(option);
        });
        clientFilterSelect.value = currentSelectedClient; // Persist selection
    };


    const applyFilters = () => {
        const selectedModel = modelFilterSelect.value;
        const selectedClient = clientFilterSelect.value;

        const filteredRecords = allRecords.filter(record => {
            const recordModel = record.modelo;
            const recordClient = record.cliente;
            
            const matchesModel = !selectedModel || recordModel === selectedModel;
            const matchesClient = !selectedClient || recordClient === selectedClient;

            return matchesModel && matchesClient; 
        });

        // Only render visible content based on active tab
        if (currentActiveTab === 'dashboard') {
            renderAnalytics(filteredRecords);
        } else if (currentActiveTab === 'history') {
            renderHistoryTable(filteredRecords);
        } else if (currentActiveTab === 'time-analysis') {
            renderTemporalAnalytics(filteredRecords);
        }
    };

    applyFiltersBtn.addEventListener('click', applyFilters); // This button applies filters only
    // These buttons now trigger a full data fetch and re-render
    document.getElementById('refresh-analytics').addEventListener('click', fetchAndDisplayHistory); 
    refreshTemporalAnalyticsBtn.addEventListener('click', fetchAndDisplayHistory);


    const renderHistoryTable = (records) => {
        const tableBody = document.getElementById('historyTableBody');
        const noResults = document.getElementById('no-results');
        tableBody.innerHTML = '';

        if (records.length === 0) {
            noResults.classList.remove('hidden');
            return;
        }
        noResults.classList.add('hidden');

        records.forEach(rec => {
            let failures = 0;
            let hasTests = false;
            Object.keys(rec).forEach(key => {
                if(allComponents.some(c => c.id === key)) {
                    hasTests = true;
                    if(String(rec[key]).startsWith(STATUS_FALHA)) failures++;
                }
            });
            const statusBadge = failures > 0 
                ? `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">${failures} Falha(s)</span>`
                : `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Aprovado</span>`;

            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">${new Date(rec.data).toLocaleString('pt-BR')}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">${rec.modelo}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">${rec.cliente}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">${statusBadge}</td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button data-record-date="${rec.data}" class="delete-btn text-red-600 hover:text-red-900"><i class="fas fa-trash-alt"></i></button>
                </td>
            `;
            tableBody.appendChild(row);
        });

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const recordDate = e.currentTarget.dataset.recordDate;
                showConfirmationModal({
                    title: 'Apagar Registo?',
                    message: 'Esta ação é irreversível. Deseja apagar este registo permanentemente?',
                    icon: 'fas fa-exclamation-triangle',
                    iconContainerBg: 'bg-red-500',
                    confirmText: 'Sim, Apagar',
                    confirmBg: 'bg-red-600',
                    confirmHoverBg: 'hover:bg-red-700',
                    callback: () => deleteRecord(recordDate)
                });
            });
        });
    };

    document.getElementById('searchInput').addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('#historyTableBody tr');
        let foundResults = false;
        rows.forEach(row => {
            const rowText = row.textContent.toLowerCase();
            if (rowText.includes(searchTerm)) {
                row.classList.remove('hidden');
                foundResults = true;
            } else {
                row.classList.add('hidden');
            }
        });
        if (!foundResults && rows.length > 0) { 
             noResults.classList.remove('hidden');
        } else {
             noResults.classList.add('hidden');
        }

        if (searchTerm === '') {
            // If search is cleared, re-apply initial filters
            applyFilters();
        }
    });
    

    const renderAnalytics = (records) => {
        renderOverallStatusChart(records);
        renderFailuresByComponentChart(records);
        renderTestsByModelChart(records); 
        renderTestsByClientChart(records);
    };

    const renderTemporalAnalytics = (records) => {
        renderTestsByDayChart(records);
        renderTestsByWeekChart(records);
        renderTestsByMonthChart(records);
    };

    const createOrUpdateChart = (chartId, config) => {
        const ctx = document.getElementById(chartId).getContext('2d');
        if (charts[chartId]) {
            charts[chartId].destroy();
        }
        charts[chartId] = new Chart(ctx, config);
    };
    
    const renderOverallStatusChart = (records) => {
        const statusCounts = { OK: 0, FALHA: 0 }; 
        records.forEach(rec => {
             allComponents.forEach(comp => {
                 const status = String(rec[comp.id]).split(' ')[0];
                 if(status === STATUS_OK || status === STATUS_FALHA) { 
                    statusCounts[status]++;
                 }
             });
        });
        
        const labels = ['OK', 'Falha'];
        const data = [statusCounts.OK, statusCounts.FALHA];
        const backgroundColors = ['#22c55e', '#ef4444']; 

        createOrUpdateChart('overallStatusChart', {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: backgroundColors,
                    borderColor: '#fff',
                    borderWidth: 4,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { position: 'bottom' },
                    datalabels: { // Datalabels for Donut Chart
                        color: '#fff',
                        formatter: (value, context) => {
                            const total = context.chart.data.datasets[0].data.reduce((sum, val) => sum + val, 0);
                            const percentage = total > 0 ? ((value / total) * 100).toFixed(1) + '%' : '0%';
                            return percentage;
                        },
                        font: {
                            weight: 'bold'
                        }
                    }
                }
            }
        });
    };
    
    const renderFailuresByComponentChart = (records) => {
        const failureCounts = {};
        allComponents.forEach(c => failureCounts[c.label] = 0);
        
        records.forEach(rec => {
             allComponents.forEach(comp => {
                if(String(rec[comp.id]).startsWith(STATUS_FALHA)) {
                    failureCounts[comp.label]++;
                }
             });
        });
        
        const componentsWithFailures = Object.entries(failureCounts).filter(([,count]) => count > 0);
        const sortedFailures = componentsWithFailures.sort(([,a],[,b]) => b-a).slice(0, 7); 
        
        const colors = [
            '#2563eb', 
            '#3b82f6', 
            '#60a5fa', 
            '#93c5fd', 
            '#bfdbfe', 
            '#dbeafe', 
            '#eff6ff', 
        ];

        createOrUpdateChart('failuresByComponentChart', {
            type: 'bar',
            data: {
                labels: sortedFailures.map(f => f[0]),
                datasets: [{
                    label: 'Nº de Falhas',
                    data: sortedFailures.map(f => f[1]),
                    backgroundColor: colors.slice(0, sortedFailures.length), 
                    borderRadius: 6, 
                    borderColor: '#fff', 
                    borderWidth: 2
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    tooltip: { 
                        callbacks: {
                            label: function(context) {
                                return `Falhas: ${context.parsed.x}`;
                            }
                        }
                    },
                    datalabels: { // Datalabels for Bar Chart
                        anchor: 'center', 
                        align: 'center',   
                        color: '#fff',     
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: { 
                    x: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 } ,
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)' 
                        }
                    },
                    y: {
                        grid: {
                            display: false 
                        }
                    }
                }
            }
        });
    };

    const renderTestsByModelChart = (records) => {
        const modelCounts = {};
        models.forEach(m => modelCounts[m.name] = 0); 

        records.forEach(rec => {
            const modelName = models.find(m => m.id === rec.modelo)?.name; 
            if (modelName) {
                modelCounts[modelName]++;
            }
        });

        const labels = Object.keys(modelCounts);
        const data = Object.values(modelCounts);
        
        // Nova paleta de cores para o gráfico de Testes por Modelo - mais vibrante e pastel
        const backgroundColors = [
            '#88D8B0', // Greenish Cyan
            '#FFCC66', // Golden Yellow
            '#FF6B6B', // Light Red
            '#C7D0D8', // Light Gray-Blue
            '#6A8EAE', // Muted Blue
            '#E9C46A', // Darker Golden
            '#F4A261', // Orange
            '#E76F51', // Darker Orange
            '#2A9D8F', // Teal
            '#264653', // Dark Blue-Green
        ];

        createOrUpdateChart('testsByModelChart', {
            type: 'bar', // Changed to bar chart
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nº de Testes',
                    data: data,
                    backgroundColor: backgroundColors.slice(0, labels.length), 
                    borderRadius: 6, // Added rounded corners for bars
                    borderColor: '#fff', // Added border for bars
                    borderWidth: 2 // Added border width for bars
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { position: 'bottom' }, // Moved legend to bottom for bar chart
                    datalabels: { // Datalabels for Bar Chart
                        color: '#4B5563', // Darker color for better contrast on light bars
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        },
                        anchor: 'end', // Position label at the end of the bar
                        align: 'top' // Align label to the top of the bar
                    }
                },
                scales: {
                    x: { // X-axis for categories (models)
                        grid: {
                            display: false // No grid lines on x-axis
                        }
                    },
                    y: { // Y-axis for values (number of tests)
                        beginAtZero: true,
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)' // Light grid lines
                        }
                    }
                }
            }
        });
    };

    const renderTestsByClientChart = (records) => {
        const clientCounts = {};
        records.forEach(rec => {
            const clientName = rec.cliente || 'Cliente Desconhecido';
            clientCounts[clientName] = (clientCounts[clientName] || 0) + 1;
        });

        const sortedClients = Object.entries(clientCounts).sort(([,a],[,b]) => b-a).slice(0, 10); 

        // Cores com um padrão, variando apenas o tom de azul
        const clientColors = [
            '#3B82F6', // Blue 500
            '#2563EB', // Blue 600
            '#1D4ED8', // Blue 700
            '#1E3A8A', // Blue 800
            '#172554', // Blue 900
            '#60A5FA', // Blue 400
            '#93C5FD', // Blue 300
            '#BFDBFE', // Blue 200
            '#DBEAFE', // Blue 100
            '#EFF6FF', // Blue 50
        ];

        createOrUpdateChart('testsByClientChart', {
            type: 'bar',
            data: {
                labels: sortedClients.map(c => c[0]),
                datasets: [{
                    label: 'Nº de Testes',
                    data: sortedClients.map(c => c[1]),
                    backgroundColor: clientColors.slice(0, sortedClients.length), 
                    borderRadius: 4 ,
                    borderColor: '#fff', 
                    borderWidth: 2
                }]
            },
            options: {
                indexAxis: 'y', 
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Testes: ${context.parsed.x}`;
                            }
                        }
                    },
                    datalabels: { // Datalabels para o gráfico de Cliente
                        anchor: 'center', // Alinha ao centro
                        align: 'center',   // Alinha ao centro
                        color: '#fff',     // Cor branca para contraste com a barra azul
                        formatter: (value) => value > 0 ? value : '', // Mostra o valor se for maior que 0
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        }
                    }
                },
                onClick: (e, elements) => {
                    if (elements.length > 0) {
                        const clickedElement = elements[0];
                        const clientName = charts['testsByClientChart'].data.labels[clickedElement.index];
                        showClientAnalysis(clientName);
                    }
                }
            }
        });
    };


    const showClientAnalysis = (clientName) => {
        const clientRecords = allRecords.filter(record => record.cliente === clientName);
        
        clientDetailTitle.textContent = `Análise Detalhada para: ${clientName}`;
        analyticsOverviewSection.classList.add('hidden');
        clientDetailAnalyticsSection.classList.remove('hidden');

        renderClientFailuresByComponentChart(clientRecords, clientName);
        renderClientTestsByModelChart(clientRecords, clientName);
    };

    const renderClientFailuresByComponentChart = (clientRecords, clientName) => {
        const failureCounts = {};
        allComponents.forEach(c => failureCounts[c.label] = 0);
        
        clientRecords.forEach(rec => {
             allComponents.forEach(comp => {
                if(String(rec[comp.id]).startsWith(STATUS_FALHA)) {
                    failureCounts[comp.label]++;
                }
             });
        });
        
        const sortedFailures = Object.entries(failureCounts).sort(([,a],[,b]) => b-a).filter(([,count]) => count > 0); 

        const colors = [
            '#2563eb', 
            '#3b82f6', 
            '#60a5fa', 
            '#93c5fd', 
            '#bfdbfe', 
            '#dbeafe', 
            '#eff6ff', 
        ];

        createOrUpdateChart('clientFailuresByComponentChart', {
            type: 'bar',
            data: {
                labels: sortedFailures.map(f => f[0]),
                datasets: [{
                    label: `Nº de Falhas para ${clientName}`,
                    data: sortedFailures.map(f => f[1]),
                    backgroundColor: colors.slice(0, sortedFailures.length), 
                    borderRadius: 4,
                    borderColor: '#fff', 
                    borderWidth: 2
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    datalabels: { // Datalabels for Client Failures Chart
                        anchor: 'end',
                        align: 'end',
                        color: '#4B5563', 
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: { 
                    x: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    };

    const renderClientTestsByModelChart = (clientRecords, clientName) => {
        const modelCounts = {};
        models.forEach(m => modelCounts[m.name] = 0); 

        clientRecords.forEach(rec => {
            const modelName = models.find(m => m.id === rec.modelo)?.name; 
            if (modelName) {
                modelCounts[modelName]++;
            }
        });

        const labels = Object.keys(modelCounts).filter(model => modelCounts[model] > 0);
        const data = Object.values(modelCounts).filter(count => count > 0);
        
        const backgroundColors = [
            '#4299e1', '#667eea', '#805ad5', '#d53f8c', '#dd6b20',
            '#ed8936', '#f6ad55', '#ecc94b', '#a0aec0', '#718096'
        ];

        createOrUpdateChart('clientTestsByModelChart', {
            type: 'bar', 
            data: {
                labels: labels,
                datasets: [{
                    label: `Testes para ${clientName}`,
                    data: data,
                    backgroundColor: backgroundColors.slice(0, labels.length), 
                    borderColor: '#fff',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { position: 'top' },
                    datalabels: { // Datalabels for Client Tests by Model Chart
                        anchor: 'end',
                        align: 'end',
                        color: '#4B5563', 
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: { 
                    x: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    };

    backToOverviewBtn.addEventListener('click', () => {
        clientDetailAnalyticsSection.classList.add('hidden');
        analyticsOverviewSection.classList.remove('hidden');
        applyFilters(); // Re-apply filters to refresh dashboard charts when returning to overview
    });


    const deleteRecord = async (recordDate) => {
        showLoading();
        try {
            await fetch(SCRIPT_URL, { method: 'POST', mode: 'no-cors', body: JSON.stringify({ action: 'delete', data: recordDate }) });
            fetchAndDisplayHistory();
        } catch (error) {
             showConfirmationModal({
                title: 'Erro ao Apagar',
                message: 'Não foi possível apagar o registo. Tente novamente.',
                icon: 'fas fa-times-circle',
                iconContainerBg: 'bg-red-500',
                confirmText: 'OK',
                showCancel: false
            });
        } finally {
            hideLoading();
        }
    };

    const showConfirmationModal = (config) => {
        const modal = document.getElementById('confirm-modal');
        document.getElementById('confirm-title').textContent = config.title;
        document.getElementById('confirm-message').textContent = config.message;
        document.getElementById('confirm-icon').className = `fas ${config.icon} text-2xl text-white`;
        document.getElementById('confirm-icon-container').className = `flex justify-center items-center w-12 h-12 rounded-full mx-auto mb-4 ${config.iconContainerBg}`;
        
        const confirmBtn = document.getElementById('confirm-btn');
        confirmBtn.textContent = config.confirmText;
        confirmBtn.className = `w-full text-white font-semibold py-2.5 rounded-lg transition-all ${config.confirmBg || 'bg-blue-600'} ${config.confirmHoverBg || 'hover:bg-blue-700'}`;

        const cancelBtn = document.getElementById('cancel-btn');
        cancelBtn.style.display = config.showCancel === false ? 'none' : 'block';

        const confirmHandler = () => {
            modal.classList.add('hidden');
            if(config.callback) config.callback();
            confirmBtn.removeEventListener('click', confirmHandler);
            cancelBtn.removeEventListener('click', cancelHandler);
        };
        const cancelHandler = () => {
            modal.classList.add('hidden');
            confirmBtn.removeEventListener('click', confirmHandler);
            cancelBtn.removeEventListener('click', cancelHandler);
        };

        confirmBtn.addEventListener('click', confirmHandler);
        cancelBtn.addEventListener('click', cancelHandler);

        modal.classList.remove('hidden');
    };

    // Helper to get week number (ISO 8601)
    Date.prototype.getWeek = function() {
        const date = new Date(this.getTime());
        date.setHours(0, 0, 0, 0);
        // Thursday in current week decides the year.
        date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
        // January 4 is always in week 1.
        const week1 = new Date(date.getFullYear(), 0, 4);
        // Adjust to Thursday in week 1 and count number of weeks from date to week1.
        return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
    }

    const renderTestsByDayChart = (records) => {
        const dailyCounts = {};
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        for (let i = 6; i >= 0; i--) {
            const d = new Date(today);
            d.setDate(today.getDate() - i);
            dailyCounts[d.toISOString().slice(0, 10)] = 0;
        }

        records.forEach(rec => {
            const date = new Date(rec.data);
            const dateKey = date.toISOString().slice(0, 10);
            if (dailyCounts.hasOwnProperty(dateKey)) {
                dailyCounts[dateKey]++;
            }
        });

        const labels = Object.keys(dailyCounts).map(dateString => {
            const [year, month, day] = dateString.split('-');
            return `${day}/${month}`;
        });
        const data = Object.values(dailyCounts);

        createOrUpdateChart('testsByDayChart', {
            type: 'bar', 
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nº de Testes',
                    data: data,
                    backgroundColor: '#3b82f6', 
                    borderRadius: 4,
                    borderColor: '#2563eb', 
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    datalabels: { // Datalabels for Tests by Day Chart
                        anchor: 'end',
                        align: 'top',
                        color: '#4B5563', 
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    y: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    x: { 
                        ticks: { maxRotation: 45, minRotation: 45 },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    };

    const renderTestsByWeekChart = (records) => {
        const weeklyCounts = {};
        const today = new Date();
        const currentYear = today.getFullYear();
        const currentWeek = today.getWeek();

        for (let i = 7; i >= 0; i--) {
            const d = new Date(today);
            d.setDate(today.getDate() - (i * 7)); 
            const year = d.getFullYear();
            const week = d.getWeek();
            weeklyCounts[`${year}-W${String(week).padStart(2, '0')}`] = 0;
        }


        records.forEach(rec => {
            const date = new Date(rec.data);
            const year = date.getFullYear();
            const week = date.getWeek();
            const weekKey = `${year}-W${String(week).padStart(2, '0')}`;
            if (weeklyCounts.hasOwnProperty(weekKey)) {
                weeklyCounts[weekKey]++;
            }
        });

        const labels = Object.keys(weeklyCounts);
        const data = Object.values(weeklyCounts);

        createOrUpdateChart('testsByWeekChart', {
            type: 'bar', 
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nº de Testes',
                    data: data,
                    backgroundColor: '#0ea5e9', 
                    borderRadius: 4,
                    borderColor: '#0284c7', 
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    datalabels: { // Datalabels for Tests by Week Chart
                        anchor: 'end',
                        align: 'top',
                        color: '#4B5563', 
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    y: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    x: { 
                        ticks: { maxRotation: 45, minRotation: 45 },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    };

    const renderTestsByMonthChart = (records) => {
        const monthlyCounts = {};
        const today = new Date();
        
        for (let i = 11; i >= 0; i--) {
            const d = new Date(today.getFullYear(), today.getMonth() - i, 1);
            const monthKey = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
            monthlyCounts[monthKey] = 0;
        }

        const monthNames = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];

        records.forEach(rec => {
            const date = new Date(rec.data);
            const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
            if (monthlyCounts.hasOwnProperty(monthKey)) {
                monthlyCounts[monthKey]++;
            }
        });

        const labels = Object.keys(monthlyCounts).map(monthString => {
            const [year, monthNum] = monthString.split('-');
            return `${monthNames[parseInt(monthNum) - 1]}/${year.slice(2)}`;
        });
        const data = Object.values(monthlyCounts);

        createOrUpdateChart('testsByMonthChart', {
            type: 'bar', 
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nº de Testes',
                    data: data,
                    backgroundColor: '#6366f1', 
                    borderRadius: 4,
                    borderColor: '#4f46e5', 
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { display: false },
                    datalabels: { // Datalabels for Tests by Month Chart
                        anchor: 'end',
                        align: 'top',
                        color: '#4B5563', 
                        formatter: (value) => value > 0 ? value : '', 
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    y: { 
                        beginAtZero: true, 
                        ticks: { precision: 0 },
                        grid: {
                            color: 'rgba(209, 213, 219, 0.3)'
                        }
                    },
                    x: { 
                        ticks: { maxRotation: 45, minRotation: 45 },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    };

    initApp();
});
</script>
</body>
</html>
